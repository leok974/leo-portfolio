/**
 * SkillsSection Component
 *
 * Dynamically renders skills from skills.json (auto-generated from projects).
 *
 * Copilot: This component must always fetch and render from /skills.json.
 * Never hardcode skills. The skills.json file is generated by running
 * `pnpm skills:gen` which extracts skills from projects.json.
 */

import { useEffect, useState } from 'preact/hooks';

interface Skill {
  name: string;
  count: number;
}

type SkillsData = Record<string, Skill[]>;

export function SkillsSection() {
  const [skills, setSkills] = useState<SkillsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch('/skills.json')
      .then(res => {
        if (!res.ok) throw new Error(`Failed to load skills: ${res.status}`);
        return res.json();
      })
      .then(data => {
        setSkills(data);
        setLoading(false);
      })
      .catch(err => {
        console.error('SkillsSection: Failed to load skills.json', err);
        setError(err.message);
        setLoading(false);
      });
  }, []);

  if (loading) {
    return (
      <section id="skills" className="skills-section">
        <h2>Skills & Technologies</h2>
        <p className="text-muted">Loading skills...</p>
      </section>
    );
  }

  if (error || !skills) {
    return (
      <section id="skills" className="skills-section">
        <h2>Skills & Technologies</h2>
        <p className="text-muted">Unable to load skills. Please try again later.</p>
      </section>
    );
  }

  const categories = Object.entries(skills);
  if (categories.length === 0) {
    return (
      <section id="skills" className="skills-section">
        <h2>Skills & Technologies</h2>
        <p className="text-muted">No skills found.</p>
      </section>
    );
  }

  return (
    <section id="skills" className="skills-section">
      <h2>Skills & Technologies</h2>
      <p className="lead">
        Core competencies automatically derived from project experience
      </p>

      <div className="skills-grid">
        {categories.map(([category, skillList]) => (
          <div key={category} className="skill-category">
            <h3 className="category-title">{category}</h3>
            <ul className="skill-list">
              {skillList.map(skill => (
                <li key={skill.name} className="skill-item">
                  <span className="skill-name">{skill.name}</span>
                  <span className="skill-count" title={`Used in ${skill.count} project${skill.count > 1 ? 's' : ''}`}>
                    {skill.count}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </section>
  );
}
