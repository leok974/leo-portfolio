name: Portfolio CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:
  schedule:
    - cron: '17 3 * * *'   # nightly: sync projects + OG, build, push

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/portfolio
  PW_BASE_URL: https://www.leoklemet.com
  PW_SKIP_WS: "1"

jobs:
  content-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers for OG generation
        run: npx playwright install chromium --with-deps

      # === Sync projects from GitHub & generate OG images ===
      - name: Sync projects from GitHub
        run: pnpm projects:sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate OG images
        run: pnpm og:gen

      - name: Build portfolio
        run: pnpm build:portfolio
        env:
          VITE_LAYOUT_ENABLED: "1"

      # === Build & push container ===
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: tags
        run: |
          SHA=${GITHUB_SHA::7}
          echo "tag_latest=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "tag_sha=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.portfolio
          push: true
          tags: |
            ${{ steps.tags.outputs.tag_latest }}
            ${{ steps.tags.outputs.tag_sha }}

  origin-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Assert prod is Cloudflare+Nginx (not GitHub Pages)
        run: |
          set -euo pipefail
          echo "üîç Checking production origin at https://www.leoklemet.com"
          
          H="$(curl -sSI https://www.leoklemet.com | tr -d '\r')"
          echo "$H" | sed -n '1,12p'
          
          # Must have Cloudflare server header
          if ! echo "$H" | grep -qi '^server: cloudflare'; then
            echo "‚ùå Missing 'Server: cloudflare' header ‚Äî not using Cloudflare Tunnel!"
            exit 1
          fi
          
          # Must have nginx x-config header (our custom marker)
          if ! echo "$H" | grep -qi '^x-config:'; then
            echo "‚ùå Missing 'x-config:' header ‚Äî nginx not configured correctly!"
            exit 1
          fi
          
          # Must NOT look like GitHub Pages
          if echo "$H" | grep -qi 'github'; then
            echo "‚ùå Headers contain 'github' ‚Äî looks like GitHub Pages is serving this!"
            exit 1
          fi
          
          # Must return 200 OK
          if ! echo "$H" | grep -qi '^http/.* 200 '; then
            echo "‚ùå Production site not returning 200 OK"
            exit 1
          fi
          
          echo "‚úÖ Production origin verified: Cloudflare + Nginx (Docker deployment)"

  e2e-prod:
    needs: [content-build, origin-guard]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests against production
        env:
          PW_BASE_URL: ${{ env.PW_BASE_URL }}
          PW_SKIP_WS: "1"
          SKIP_BACKEND: "1"
          SKIP_FLAKY: "1"
          SKIP_OG_HTTP: "1"
        run: |
          echo "Testing against $PW_BASE_URL"
          npx playwright test --config=playwright.portfolio.config.ts

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
