name: backend-tests
on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write
  pull-requests: write

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SITEAGENT_ENABLE_WRITE: "1"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4



      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Start stack (prod compose)
        run: |
          docker compose -f deploy/docker-compose.prod.yml up -d --remove-orphans
          docker compose -f deploy/docker-compose.prod.yml ps

      - name: Preflight wait for nginx (_up)
        run: node scripts/wait-http.mjs http://127.0.0.1:8080/_up --timeout=180000 --interval=1000

      - name: Health check - Metrics Behavior API (Phase 50.8)
        run: |
          echo "Testing /api/metrics/behavior endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://127.0.0.1:8080/api/metrics/behavior?limit=10)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Metrics behavior endpoint failed with status $HTTP_CODE"
            exit 1
          fi
          echo "✅ Metrics behavior endpoint healthy"

      - name: Run strict backend tests
        env:
          BACKEND_REQUIRED: "1"
          WAIT_SERVER_MS: "120000"
          WAIT_SERVER_INTERVAL_MS: "1000"
          WAIT_PRIMARY_MS: "120000"
          WAIT_PRIMARY_META_TIMEOUT_MS: "5000"
          WAIT_CHAT_MS: "20000"
          WAIT_SSE_MS: "90000"
          WAIT_SSE_ATTEMPT_MS: "30000"
        run: pnpm run test:backend:req

      # New: quick reachability table when strict run fails
      - name: Probe stack (edge/backend/ollama)
        if: failure()
        run: pnpm run probe:stack || true

      - name: "On failure: soft diagnostics (no fail)"
        if: failure()
        env:
          BACKEND_REQUIRED: "1"
          WAIT_PRIMARY_SOFT: "1"
          WAIT_PRIMARY_LOG: "1"
          WAIT_SERVER_MS: "180000"
          WAIT_SERVER_INTERVAL_MS: "1000"
          WAIT_PRIMARY_MS: "120000"
          WAIT_PRIMARY_META_TIMEOUT_MS: "8000"
          WAIT_CHAT_MS: "30000"
          WAIT_SSE_MS: "120000"
          WAIT_SSE_ATTEMPT_MS: "45000"
        run: pnpm run test:backend:req:soft || true

      - name: "On failure: stream diagnostics (produce JSON; no fail)"
        if: failure()
        env:
          BACKEND_REQUIRED: "1"
          PLAYWRIGHT_GLOBAL_SETUP_SKIP: "1"
          ALLOW_STREAM_FLAKY: "1"
          STREAM_LATENCY_LOG: "1"
          WAIT_SSE_MS: "120000"
          WAIT_SSE_ATTEMPT_MS: "45000"
        run: |
          # Re-run first-chunk as JSON to capture annotations
          npx playwright test -g "@backend chat stream first-chunk" --reporter=json > playwright-report/results.json || true

      # New: summarize p50/p95 first-token from JSON; writes to job summary
      - name: "On failure: latency rollup (p50/p95)"
        if: failure()
        run: node scripts/stream-latency-report.mjs playwright-report/results.json || true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore

  python:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r assistant_api/requirements.txt

      - name: Run grounded chat test
        env:
          DEV_ALLOW_NO_LLM: '1'
        run: |
          export RAG_DB="$(mktemp -u).db"
          python -m pytest -q tests/test_chat_rag_grounded.py
