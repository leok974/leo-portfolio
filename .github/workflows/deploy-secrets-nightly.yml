name: Deploy Secrets Nightly

on:
  schedule:
    # Run daily at 3 AM UTC (11 PM EST / 8 PM PST)
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if secrets unchanged'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if secrets are configured
        id: check_secrets
        env:
          FIGMA_PAT: ${{ secrets.FIGMA_PAT }}
        run: |
          if [ -z "$FIGMA_PAT" ]; then
            echo "❌ FIGMA_PAT secret not configured"
            echo "configured=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ Secrets configured"
          echo "configured=true" >> $GITHUB_OUTPUT

      - name: Generate production env file
        env:
          FIGMA_PAT: ${{ secrets.FIGMA_PAT }}
          FIGMA_TEAM_ID: ${{ secrets.FIGMA_TEAM_ID }}
          FIGMA_TEMPLATE_KEY: ${{ secrets.FIGMA_TEMPLATE_KEY }}
        run: |
          mkdir -p deploy
          cat > deploy/.env.production <<EOF
          # Production Secrets - Auto-deployed by GitHub Actions
          # Last Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Workflow: deploy-secrets-nightly.yml
          
          # Figma MCP Integration (Phase 51)
          FIGMA_PAT=${FIGMA_PAT}
          FIGMA_TEAM_ID=${FIGMA_TEAM_ID:-}
          FIGMA_TEMPLATE_KEY=${FIGMA_TEMPLATE_KEY:-}
          EOF
          
          echo "✅ Generated .env.production"
          echo "File size: $(stat -f%z deploy/.env.production 2>/dev/null || stat -c%s deploy/.env.production) bytes"

      - name: Verify env file
        run: |
          if [ ! -f deploy/.env.production ]; then
            echo "❌ File not created"
            exit 1
          fi
          
          if ! grep -q "FIGMA_PAT=" deploy/.env.production; then
            echo "❌ FIGMA_PAT not found in file"
            exit 1
          fi
          
          echo "✅ File verified"

      - name: Deploy via Watchtower signal
        id: deploy
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Deployment Strategy: Watchtower Auto-Pull"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "The .env.production file has been generated with current secrets."
          echo ""
          echo "Deployment Method:"
          echo "1. ✅ Secrets stored in GitHub (secure)"
          echo "2. ✅ File generated in CI (ephemeral)"
          echo "3. ⏳ Watchtower monitors GHCR for image updates"
          echo "4. ⏳ On new image: pulls + restarts with env vars"
          echo ""
          echo "Note: Secrets are injected via docker-compose env vars,"
          echo "not via file deployment (Cloudflare + Watchtower setup)."
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Trigger backend rebuild (optional)
        if: github.event.inputs.force_deploy == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Force deploy requested - triggering backend rebuild"
          gh workflow run publish-backend.yml
          echo "✅ Backend rebuild workflow triggered"

      - name: Create deployment report
        if: always()
        run: |
          cat > deployment-report.txt <<EOF
          Deployment Report
          =================
          Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Workflow: deploy-secrets-nightly.yml
          Run ID: ${{ github.run_id }}
          
          Secrets Status:
          - FIGMA_PAT: $([ -n "${{ secrets.FIGMA_PAT }}" ] && echo "✅ Set" || echo "❌ Not Set")
          - FIGMA_TEAM_ID: $([ -n "${{ secrets.FIGMA_TEAM_ID }}" ] && echo "✅ Set" || echo "⚪ Empty")
          - FIGMA_TEMPLATE_KEY: $([ -n "${{ secrets.FIGMA_TEMPLATE_KEY }}" ] && echo "✅ Set" || echo "⚪ Empty")
          
          Deployment Status:
          - Env file generated: ✅
          - Secrets configured: ${{ steps.check_secrets.outputs.configured }}
          - Force deploy: ${{ github.event.inputs.force_deploy || 'false' }}
          
          Next Steps:
          1. Watchtower will auto-deploy on next image update
          2. Backend container will receive env vars on restart
          3. Verify: docker exec portfolio-backend env | grep FIGMA_PAT
          4. Test: curl https://api.leoklemet.com/api/agent/brand/templates
          
          Notes:
          - This workflow runs nightly at 3 AM UTC
          - Secrets are ephemeral (generated in CI, not committed)
          - Production uses docker-compose env vars (not file mount)
          - Watchtower handles auto-deployment when image updates
          EOF
          
          cat deployment-report.txt

      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.run_id }}
          path: deployment-report.txt
          retention-days: 7

      - name: Send notification on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check workflow logs for details"
          echo "Workflow URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  verify-production:
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: success()
    
    steps:
      - name: Wait for Watchtower cycle
        run: |
          echo "⏳ Waiting 10 seconds for Watchtower to potentially update..."
          sleep 10

      - name: Verify production endpoint
        id: verify
        continue-on-error: true
        run: |
          echo "🔍 Verifying production API health..."
          
          # Check main API health
          if curl -fsS --max-time 10 https://api.leoklemet.com/ready > /dev/null 2>&1; then
            echo "✅ API is healthy"
            echo "healthy=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️  API health check failed (might be restarting)"
            echo "healthy=false" >> $GITHUB_OUTPUT
          fi
          
          # Check brand endpoints (may fail if token not yet deployed)
          echo ""
          echo "🔍 Testing brand endpoints..."
          if curl -fsS --max-time 10 https://api.leoklemet.com/api/agent/brand/templates > /dev/null 2>&1; then
            echo "✅ Brand endpoints responding"
            echo "brand_working=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  Brand endpoints not yet available (expected if token not deployed)"
            echo "brand_working=false" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Nightly Deployment Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "API Health: ${{ steps.verify.outputs.healthy == 'true' && '✅ Healthy' || '⚠️  Unhealthy' }}"
          echo "Brand Endpoints: ${{ steps.verify.outputs.brand_working == 'true' && '✅ Working' || 'ℹ️  Pending' }}"
          echo ""
          echo "Note: Brand endpoints require manual deployment of .env.production"
          echo "See CLOUDFLARE_WATCHTOWER_DEPLOY.md for instructions"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
