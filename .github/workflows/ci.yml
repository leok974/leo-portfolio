name: CI

on:
  push:
    branches: [main, polish]
  pull_request:
    branches: [main, polish]

jobs:
  # NOTE: E2E tests disabled in CI - they require backend + dev overlay auth
  # Most tests tagged @frontend still need backend API for state/data
  # Run locally with: npm run dev:portfolio (backend) + npx playwright test
  #
  # playwright-tests:
  #   name: Run E2E Tests (Playwright)
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Install Playwright browsers
  #       run: npx playwright install chromium --with-deps
  #     - name: Build frontend
  #       run: npm run build:portfolio
  #     - name: Copy book.html to dist
  #       run: cp book.html dist-portfolio/book.html
  #     - name: Copy calendly.js to dist
  #       run: |
  #         mkdir -p dist-portfolio/assets/js
  #         cp public/assets/js/calendly.js dist-portfolio/assets/js/calendly.js
  #     - name: Symlink dist for E2E tests
  #       run: |
  #         if [ -d dist-portfolio ] && [ ! -e dist ]; then
  #           ln -s dist-portfolio dist
  #         fi
  #     - name: Start static server for E2E tests
  #       run: |
  #         npx http-server dist-portfolio -p 5174 -a 127.0.0.1 --silent &
  #         echo $! > .http-server.pid
  #         sleep 3
  #     - name: Run E2E Tests
  #       env:
  #         PW_APP: portfolio
  #         PW_BASE_URL: http://127.0.0.1:5174
  #         PW_SKIP_WS: "1"
  #         BACKEND_REQUIRED: "0"
  #       run: npx playwright test --grep "@frontend" --reporter=html
  #     - name: Stop static server
  #       if: always()
  #       run: |
  #         if [ -f .http-server.pid ]; then
  #           kill $(cat .http-server.pid) || true
  #           rm .http-server.pid
  #         fi
  #     - name: Upload Playwright HTML report
  #       if: failure()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 7
  #     - name: Upload test traces
  #       if: failure()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-traces
  #         path: test-results/
  #         retention-days: 7

  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r assistant_api/requirements.txt
          if [ -f assistant_api/requirements-dev.txt ]; then pip install -r assistant_api/requirements-dev.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run pytest (fast-fail)
        env:
          APP_ENV: test
          RAG_DB_PATH: ":memory:"
          PRIMARY_MODEL: "qwen2.5:7b-instruct-q4_K_M"
          ENABLE_RAG: "false"
        run: pytest assistant_api/tests/ -q --tb=short --maxfail=5 --no-cov

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Node dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          pip install ruff black mypy pip-audit
          pip install -r requirements-dev.txt

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run Python linting (ruff)
        run: ruff check assistant_api/

      - name: Run Python formatting check (black)
        run: black --check assistant_api/

      - name: Run Python type check (mypy)
        run: mypy assistant_api/ --ignore-missing-imports || echo "⚠️ mypy found type errors (non-blocking)"

      - name: Run security audit (pip-audit)
        run: pip-audit -r assistant_api/requirements.txt || echo "⚠️ pip-audit skipped (needs config)"

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r assistant_api/requirements.txt

      - name: Start backend service
        env:
          APP_ENV: test
          RAG_DB_PATH: ":memory:"
          PRIMARY_MODEL: "qwen2.5:7b-instruct-q4_K_M"
          DISABLE_PRIMARY: "1"
        run: |
          python -m uvicorn assistant_api.main:app --host 127.0.0.1 --port 8001 &
          echo $! > backend.pid
          sleep 5

      - name: Run smoke tests
        shell: pwsh
        run: pwsh -File scripts/smoke-ci.ps1 -BaseUrl "http://127.0.0.1:8001" -TimeoutSec 120

      - name: Dump backend logs on failure
        if: failure()
        run: |
          echo "::group::Backend Process Status"
          ps aux | grep uvicorn || true
          ps aux | grep python || true
          echo "::endgroup::"
          echo "::group::Backend PID"
          if [ -f backend.pid ]; then cat backend.pid; fi
          echo "::endgroup::"

      - name: Stop backend service
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
          fi
          # Kill any remaining uvicorn processes
          pkill -f uvicorn || true

  build:
    name: Build & Verify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build:portfolio

      - name: Verify build output
        run: |
          ls -lh dist-portfolio/
          test -f dist-portfolio/index.html

      # TODO: Re-enable when SRI manifest generation is implemented
      # - name: Check SRI manifest
      #   run: test -f dist-portfolio/sri-manifest.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-portfolio
          path: dist-portfolio/
          retention-days: 7

  e2e-fullstack:
    name: E2E (full-stack)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install frontend deps
        run: npm ci || npm i

      - name: Install Playwright deps
        run: npx playwright install --with-deps

      - name: Install backend deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip
          pip install -r assistant_api/requirements.txt
          if [ -f assistant_api/requirements-dev.txt ]; then pip install -r assistant_api/requirements-dev.txt; fi

      - name: Start backend (test mode)
        env:
          APP_ENV: test
          SKIP_PROVIDER_INIT: "1"
          RAG_DB_PATH: ":memory:"
          SITEAGENT_DEV_COOKIE_KEY: "test-cookie-key-for-ci"
        run: |
          . .venv/bin/activate
          uvicorn assistant_api.main:app --host 127.0.0.1 --port 8001 > backend.log 2>&1 &
          echo $! > backend.pid
          sleep 2

      - name: Wait for backend /health
        shell: bash
        run: |
          set -e
          deadline=$((SECONDS+120))
          until curl -sf http://127.0.0.1:8001/health > /dev/null; do
            if [ $SECONDS -gt $deadline ]; then
              echo "Backend failed to become healthy"
              echo "::group::Backend logs"
              tail -n +1 backend.log || true
              echo "::endgroup::"
              exit 1
            fi
            sleep 2
          done
          echo "Backend healthy."

      - name: Enable dev overlay (best-effort)
        run: |
          curl -s -X POST http://127.0.0.1:8001/agent/dev/enable -H "Content-Type: application/json" -d '{}' || true

      - name: Build siteagent
        run: npm run build:siteagent

      - name: Create dist symlink for tests
        run: |
          if [ ! -e dist ]; then
            ln -s dist-siteagent dist
          fi
          echo "Verifying dist structure:"
          ls -la dist/assets/ | head -20

      - name: Preview siteagent (vite)
        run: |
          npx vite preview --host 127.0.0.1 --port 5173 --strictPort --outDir dist-siteagent > preview.log 2>&1 &
          echo $! > preview.pid
          
          # Wait for vite preview to be ready (up to 30s)
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5173/ | grep -q "200"; then
              echo "Vite preview ready on port 5173"
              curl -s http://127.0.0.1:5173/ | head -20
              break
            fi
            echo "Waiting for vite preview... ($i/30)"
            sleep 1
          done
          
          if ! curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5173/ | grep -q "200"; then
            echo "ERROR: Vite preview did not start!"
            cat preview.log
            exit 1
          fi

      - name: Run Playwright tests
        env:
          PW_BASE_URL: "http://127.0.0.1:5173"
          BACKEND_REQUIRED: "1"
        run: npm run e2e:ci

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Teardown
        if: always()
        run: |
          kill $(cat preview.pid) 2>/dev/null || true
          kill $(cat backend.pid) 2>/dev/null || true
          sleep 1
          echo "::group::Backend logs"
          tail -n +200 backend.log || true
          echo "::endgroup::"
          echo "::group::Preview logs"
          tail -n +200 preview.log || true
          echo "::endgroup::"
