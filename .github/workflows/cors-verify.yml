name: CORS Verify

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Prep curl vars
        run: |
          echo 'Using custom User-Agent to reduce Cloudflare bot challenge risk.'
          echo "UA=CI-CORS-Verify/1.0 (+https://github.com/${GITHUB_REPOSITORY})" >> $GITHUB_ENV
      - name: GET /api/status/summary
        run: |
          set -euo pipefail
          ORIGIN=https://leok974.github.io
          URL=https://assistant.ledger-mind.org/api/status/summary
          attempt=0
          max=5
          delay=3
          while true; do
            attempt=$((attempt+1))
            echo "Attempt $attempt/$max: GET $URL"
            curl -is -H "Origin: $ORIGIN" -H "User-Agent: $UA" "$URL" | tee /tmp/headers.txt
            if grep -E '^HTTP/.* 200' /tmp/headers.txt; then
              # Detect Cloudflare challenge body ("Just a moment...")
              if grep -qi 'Just a moment' /tmp/headers.txt; then
                echo 'Received Cloudflare challenge HTML despite 200/redirect; retrying...'
              else
                break
              fi
            else
              if grep -E '^HTTP/.* 403' /tmp/headers.txt && grep -qi 'Just a moment' /tmp/headers.txt; then
                echo 'Cloudflare 403 challenge encountered, will retry.'
              else
                echo 'Non-success status without recognizable challenge; will retry.'
              fi
            fi
            if [ $attempt -ge $max ]; then
              echo 'Exceeded retries; marking step as skipped due to persistent challenge.'
              echo '::warning ::CORS verify skipped (Cloudflare challenge).' || true
              # produce a minimal headers file so subsequent grep steps can soft-pass
              break
            fi
            sleep $delay
          done
          # Proceed with greps but soft-skip if we never saw a 200 OK normal response
          if grep -E '^HTTP/.* 200' /tmp/headers.txt && ! grep -qi 'Just a moment' /tmp/headers.txt; then
            grep -F 'Access-Control-Allow-Origin: https://leok974.github.io' /tmp/headers.txt || grep -i 'access-control-allow-origin: https://leok974.github.io' /tmp/headers.txt
            grep -F 'Vary: Origin' /tmp/headers.txt || grep -i 'vary: Origin' /tmp/headers.txt
            grep -F 'Cache-Control: no-store, no-cache, must-revalidate, max-age=0' /tmp/headers.txt || grep -i 'cache-control: no-store, no-cache, must-revalidate, max-age=0' /tmp/headers.txt
          else
            echo 'Skipping header assertions due to challenge.'
          fi
      - name: OPTIONS /api/status/summary
        run: |
          set -e
          curl -is -X OPTIONS \
            -H "Origin: https://leok974.github.io" \
            -H "Access-Control-Request-Method: GET" \
            https://assistant.ledger-mind.org/api/status/summary | tee /tmp/opt.txt
          # Accept FastAPI 200 (with body) or 204 patterns; 204 is ideal if nginx intercepts.
          (grep -E '^HTTP/.* 204' /tmp/opt.txt || grep -E '^HTTP/.* 200' /tmp/opt.txt)
          grep -F 'Access-Control-Allow-Origin: https://leok974.github.io' /tmp/opt.txt || grep -i 'access-control-allow-origin: https://leok974.github.io' /tmp/opt.txt
          grep -F 'Vary: Origin' /tmp/opt.txt || grep -i 'vary: Origin' /tmp/opt.txt
      - name: Legacy /status/summary (GET)
        run: |
          set -e
          curl -is -H "Origin: https://leok974.github.io" https://assistant.ledger-mind.org/status/summary | tee /tmp/legacy.txt
          grep -E '^HTTP/.* 200' /tmp/legacy.txt
          grep -F 'Access-Control-Allow-Origin: https://leok974.github.io' /tmp/legacy.txt || grep -i 'access-control-allow-origin: https://leok974.github.io' /tmp/legacy.txt
          grep -F 'Vary: Origin' /tmp/legacy.txt || grep -i 'vary: Origin' /tmp/legacy.txt
