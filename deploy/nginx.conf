limit_req_zone $binary_remote_addr zone=api_rl:10m rate=30r/m;
limit_conn_zone $binary_remote_addr zone=sse_conn:10m;

# Map upstream error status codes to a warming flag (for status summary interception)
map $upstream_status $warm {
  default 0;
  000 1;  # no upstream / connection refused
  502 1;
  503 1;
  504 1;
}

# Centralized CORS allow list (defined at http block scope)
map $http_origin $cors_ok {
  default 0;
  '~^https://leok974\.github\.io$' 1;
  '~^https://app\.ledger-mind\.org$' 1;
}

server {
  listen 80;
  server_name _;

  # Root SPA assets
  root /usr/share/nginx/html;
  index index.html;

    # --- Security headers ---
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  # CSP tightened: remove inline script allowance (no 'unsafe-inline' in script-src). Inline styles still temporarily allowed.
  # TODO: eliminate remaining inline <style> blocks and drop 'unsafe-inline' from style-src.
  add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: blob:; font-src 'self' data:; connect-src 'self' https: http:; script-src 'self'; style-src 'self';" always;
  # Manifest MIME correction: serve .webmanifest / .manifest as application/manifest+json
  types { application/manifest+json webmanifest manifest; }
  location = /site.webmanifest { default_type application/manifest+json; try_files $uri =404; }

  # Long-cache immutable hashed assets
  location ~* \.(?:js|css|woff2|png|jpe?g|webp|gif|svg|ico)$ {
    add_header Cache-Control "public, max-age=31536000, immutable";
    try_files $uri =404;
  }

  # SPA fallback
  location / {
    try_files $uri /index.html;
  }

  # API proxy (preserve URI)
  location /api/ {
    limit_req zone=api_rl burst=15 nodelay;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_read_timeout 300s;
    proxy_send_timeout 300s;
    proxy_pass http://backend:8000$request_uri;
  }

  # Streaming SSE
  location /chat/stream {
    limit_conn sse_conn 1;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_read_timeout 300s;
    proxy_send_timeout 300s;
    proxy_pass http://backend:8000$request_uri;
  }

  # Health & diagnostics passthrough
  location /llm/ { proxy_pass http://backend:8000$request_uri; }
  location /ready { proxy_pass http://backend:8000/ready; }
  location /metrics { proxy_pass http://backend:8000/metrics; }

  # $cors_ok available from http-level map

  # Preferred path: /api/status/* -> backend /status/* (rewrite) with CORS
  # Special case /api/status/summary for warming interception
  location = /api/status/summary {
    proxy_intercept_errors on;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_pass http://backend:8000/status/summary;
    add_header X-Status-Path api always;
    if ($cors_ok) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Vary Origin always;
    }
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
    error_page 500 502 503 504 = @warming_json;
  }

  location /api/status/ {
    rewrite ^/api/status/(.*)$ /status/$1 break;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_pass http://backend:8000;
    add_header X-Status-Path api always;
    # CORS on all outcomes
    if ($cors_ok) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Vary Origin always;
    }
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Methods "GET,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Content-Type" always;
      return 204;
    }
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
  }

  # Legacy direct /status/* passthrough (normalize single CORS header)
  location /status/ {
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_pass http://backend:8000$request_uri;
    add_header X-Status-Path legacy always;
    # Remove upstream duplicates to emit one canonical header set
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Vary;
    if ($cors_ok) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Vary Origin always;
    }
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Methods "GET,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Content-Type" always;
      return 204;
    }
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
  }

  # Internal warming JSON response (served when upstream summary not yet ready)
  location @warming_json {
    add_header X-Status-Path api always;
    if ($cors_ok) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Vary Origin always;
    }
    add_header Content-Type application/json;
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
    return 200 '{"ok":false,"ready":false,"llm":{"path":"warming"},"rag":{"ok":true}}';
  }
}
